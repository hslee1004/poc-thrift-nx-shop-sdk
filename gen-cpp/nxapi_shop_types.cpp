/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "nxapi_shop_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace nxapi_shop {

int _kNXCashTypeValues[] = {
  NXCashType::kNXDefault,
  NXCashType::kNXCredit,
  NXCashType::kNXPrepaid,
  NXCashType::kNXCoupon,
  NXCashType::kNXNexonCash,
  NXCashType::kNXSera,
  NXCashType::kNXGamePoint
};
const char* _kNXCashTypeNames[] = {
  "kNXDefault",
  "kNXCredit",
  "kNXPrepaid",
  "kNXCoupon",
  "kNXNexonCash",
  "kNXSera",
  "kNXGamePoint"
};
const std::map<int, const char*> _NXCashType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kNXCashTypeValues, _kNXCashTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNXAPIResultsTypeValues[] = {
  NXAPIResultsType::kNone,
  NXAPIResultsType::kSuccess,
  NXAPIResultsType::kFail
};
const char* _kNXAPIResultsTypeNames[] = {
  "kNone",
  "kSuccess",
  "kFail"
};
const std::map<int, const char*> _NXAPIResultsType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNXAPIResultsTypeValues, _kNXAPIResultsTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNXAccountBalanceResultCodeValues[] = {
  NXAccountBalanceResultCode::kNone,
  NXAccountBalanceResultCode::kOK,
  NXAccountBalanceResultCode::kDBError,
  NXAccountBalanceResultCode::kInServerMaintenance,
  NXAccountBalanceResultCode::kBlockedUser,
  NXAccountBalanceResultCode::kUserNotExist
};
const char* _kNXAccountBalanceResultCodeNames[] = {
  "kNone",
  "kOK",
  "kDBError",
  "kInServerMaintenance",
  "kBlockedUser",
  "kUserNotExist"
};
const std::map<int, const char*> _NXAccountBalanceResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kNXAccountBalanceResultCodeValues, _kNXAccountBalanceResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNXPurchaseReasonValues[] = {
  NXPurchaseReason::kNXReasonDefault,
  NXPurchaseReason::kNXReasonGameClient,
  NXPurchaseReason::kNXReasonWeb,
  NXPurchaseReason::kNXReasonGameClientInPCCafe,
  NXPurchaseReason::kNXReasonWebInPCCafe
};
const char* _kNXPurchaseReasonNames[] = {
  "kNXReasonDefault",
  "kNXReasonGameClient",
  "kNXReasonWeb",
  "kNXReasonGameClientInPCCafe",
  "kNXReasonWebInPCCafe"
};
const std::map<int, const char*> _NXPurchaseReason_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kNXPurchaseReasonValues, _kNXPurchaseReasonNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNXPaymentRuleIdValues[] = {
  NXPaymentRuleId::kNXRuleAll,
  NXPaymentRuleId::kNXRuleAllowRefund,
  NXPaymentRuleId::kNXRuleNoRefund
};
const char* _kNXPaymentRuleIdNames[] = {
  "kNXRuleAll",
  "kNXRuleAllowRefund",
  "kNXRuleNoRefund"
};
const std::map<int, const char*> _NXPaymentRuleId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNXPaymentRuleIdValues, _kNXPaymentRuleIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNXPurchaseItemCodeValues[] = {
  NXPurchaseItemCode::kNXRuleAll,
  NXPurchaseItemCode::kNXRuleAllowRefund,
  NXPurchaseItemCode::kNXRuleNoRefund
};
const char* _kNXPurchaseItemCodeNames[] = {
  "kNXRuleAll",
  "kNXRuleAllowRefund",
  "kNXRuleNoRefund"
};
const std::map<int, const char*> _NXPurchaseItemCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNXPurchaseItemCodeValues, _kNXPurchaseItemCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kENXShowInventoryValues[] = {
  ENXShowInventory::kNXShowInvenNone,
  ENXShowInventory::kNXShowInvenDisplayToUser,
  ENXShowInventory::kNXShowInvenHiddenToUser
};
const char* _kENXShowInventoryNames[] = {
  "kNXShowInvenNone",
  "kNXShowInvenDisplayToUser",
  "kNXShowInvenHiddenToUser"
};
const std::map<int, const char*> _ENXShowInventory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kENXShowInventoryValues, _kENXShowInventoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kENXInventoryOrderTypeValues[] = {
  ENXInventoryOrderType::kNXInvenOrderTypeNormal,
  ENXInventoryOrderType::kNXInvenOrderTypePresent,
  ENXInventoryOrderType::kNXInvenOrderTypeBoth,
  ENXInventoryOrderType::kNXInvenOrderTypeAll
};
const char* _kENXInventoryOrderTypeNames[] = {
  "kNXInvenOrderTypeNormal",
  "kNXInvenOrderTypePresent",
  "kNXInvenOrderTypeBoth",
  "kNXInvenOrderTypeAll"
};
const std::map<int, const char*> _ENXInventoryOrderType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kENXInventoryOrderTypeValues, _kENXInventoryOrderTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


NXAPIResult::~NXAPIResult() throw() {
}


void NXAPIResult::__set_response(const NXAPIResultsType::type val) {
  this->response = val;
}

void NXAPIResult::__set_response_value(const std::string& val) {
  this->response_value = val;
__isset.response_value = true;
}

uint32_t NXAPIResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->response = (NXAPIResultsType::type)ecast0;
          this->__isset.response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->response_value);
          this->__isset.response_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXAPIResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXAPIResult");

  xfer += oprot->writeFieldBegin("response", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->response);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.response_value) {
    xfer += oprot->writeFieldBegin("response_value", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->response_value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXAPIResult &a, NXAPIResult &b) {
  using ::std::swap;
  swap(a.response, b.response);
  swap(a.response_value, b.response_value);
  swap(a.__isset, b.__isset);
}

NXAPIResult::NXAPIResult(const NXAPIResult& other1) {
  response = other1.response;
  response_value = other1.response_value;
  __isset = other1.__isset;
}
NXAPIResult& NXAPIResult::operator=(const NXAPIResult& other2) {
  response = other2.response;
  response_value = other2.response_value;
  __isset = other2.__isset;
  return *this;
}
void NXAPIResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXAPIResult(";
  out << "response=" << to_string(response);
  out << ", " << "response_value="; (__isset.response_value ? (out << to_string(response_value)) : (out << "<null>"));
  out << ")";
}


NXCash::~NXCash() throw() {
}


void NXCash::__set_cash_type(const NXCashType::type val) {
  this->cash_type = val;
}

void NXCash::__set_cash_amount(const int32_t val) {
  this->cash_amount = val;
}

uint32_t NXCash::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->cash_type = (NXCashType::type)ecast3;
          this->__isset.cash_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cash_amount);
          this->__isset.cash_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXCash::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXCash");

  xfer += oprot->writeFieldBegin("cash_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->cash_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cash_amount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->cash_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXCash &a, NXCash &b) {
  using ::std::swap;
  swap(a.cash_type, b.cash_type);
  swap(a.cash_amount, b.cash_amount);
  swap(a.__isset, b.__isset);
}

NXCash::NXCash(const NXCash& other4) {
  cash_type = other4.cash_type;
  cash_amount = other4.cash_amount;
  __isset = other4.__isset;
}
NXCash& NXCash::operator=(const NXCash& other5) {
  cash_type = other5.cash_type;
  cash_amount = other5.cash_amount;
  __isset = other5.__isset;
  return *this;
}
void NXCash::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXCash(";
  out << "cash_type=" << to_string(cash_type);
  out << ", " << "cash_amount=" << to_string(cash_amount);
  out << ")";
}


NXAccountBalance::~NXAccountBalance() throw() {
}


void NXAccountBalance::__set_nexon_id(const NXUserId val) {
  this->nexon_id = val;
}

void NXAccountBalance::__set_balances(const std::vector<NXCash> & val) {
  this->balances = val;
}

uint32_t NXAccountBalance::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nexon_id);
          this->__isset.nexon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->balances.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->balances.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->balances[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.balances = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXAccountBalance::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXAccountBalance");

  xfer += oprot->writeFieldBegin("nexon_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->nexon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balances", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->balances.size()));
    std::vector<NXCash> ::const_iterator _iter11;
    for (_iter11 = this->balances.begin(); _iter11 != this->balances.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXAccountBalance &a, NXAccountBalance &b) {
  using ::std::swap;
  swap(a.nexon_id, b.nexon_id);
  swap(a.balances, b.balances);
  swap(a.__isset, b.__isset);
}

NXAccountBalance::NXAccountBalance(const NXAccountBalance& other12) {
  nexon_id = other12.nexon_id;
  balances = other12.balances;
  __isset = other12.__isset;
}
NXAccountBalance& NXAccountBalance::operator=(const NXAccountBalance& other13) {
  nexon_id = other13.nexon_id;
  balances = other13.balances;
  __isset = other13.__isset;
  return *this;
}
void NXAccountBalance::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXAccountBalance(";
  out << "nexon_id=" << to_string(nexon_id);
  out << ", " << "balances=" << to_string(balances);
  out << ")";
}


NXAccountBalanceResult::~NXAccountBalanceResult() throw() {
}


void NXAccountBalanceResult::__set_result(const NXAccountBalanceResultCode::type val) {
  this->result = val;
}

void NXAccountBalanceResult::__set_balance(const NXAccountBalance& val) {
  this->balance = val;
}

uint32_t NXAccountBalanceResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->result = (NXAccountBalanceResultCode::type)ecast14;
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->balance.read(iprot);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXAccountBalanceResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXAccountBalanceResult");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->balance.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXAccountBalanceResult &a, NXAccountBalanceResult &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.balance, b.balance);
  swap(a.__isset, b.__isset);
}

NXAccountBalanceResult::NXAccountBalanceResult(const NXAccountBalanceResult& other15) {
  result = other15.result;
  balance = other15.balance;
  __isset = other15.__isset;
}
NXAccountBalanceResult& NXAccountBalanceResult::operator=(const NXAccountBalanceResult& other16) {
  result = other16.result;
  balance = other16.balance;
  __isset = other16.__isset;
  return *this;
}
void NXAccountBalanceResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXAccountBalanceResult(";
  out << "result=" << to_string(result);
  out << ", " << "balance=" << to_string(balance);
  out << ")";
}


NXItem::~NXItem() throw() {
}


void NXItem::__set_product_no(const int32_t val) {
  this->product_no = val;
}

void NXItem::__set_product_price(const int32_t val) {
  this->product_price = val;
}

void NXItem::__set_count(const int32_t val) {
  this->count = val;
__isset.count = true;
}

uint32_t NXItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->product_no);
          this->__isset.product_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->product_price);
          this->__isset.product_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXItem");

  xfer += oprot->writeFieldBegin("product_no", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->product_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("product_price", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->product_price);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.count) {
    xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->count);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXItem &a, NXItem &b) {
  using ::std::swap;
  swap(a.product_no, b.product_no);
  swap(a.product_price, b.product_price);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

NXItem::NXItem(const NXItem& other17) {
  product_no = other17.product_no;
  product_price = other17.product_price;
  count = other17.count;
  __isset = other17.__isset;
}
NXItem& NXItem::operator=(const NXItem& other18) {
  product_no = other18.product_no;
  product_price = other18.product_price;
  count = other18.count;
  __isset = other18.__isset;
  return *this;
}
void NXItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXItem(";
  out << "product_no=" << to_string(product_no);
  out << ", " << "product_price=" << to_string(product_price);
  out << ", " << "count="; (__isset.count ? (out << to_string(count)) : (out << "<null>"));
  out << ")";
}


NXPurchaseItems::~NXPurchaseItems() throw() {
}


void NXPurchaseItems::__set_user_ip(const std::string& val) {
  this->user_ip = val;
}

void NXPurchaseItems::__set_reason(const NXPurchaseReason::type val) {
  this->reason = val;
}

void NXPurchaseItems::__set_gameId(const NXGameId& val) {
  this->gameId = val;
}

void NXPurchaseItems::__set_nexon_id(const NXUserId val) {
  this->nexon_id = val;
}

void NXPurchaseItems::__set_nexon_oid(const int32_t val) {
  this->nexon_oid = val;
__isset.nexon_oid = true;
}

void NXPurchaseItems::__set_user_name(const std::string& val) {
  this->user_name = val;
__isset.user_name = true;
}

void NXPurchaseItems::__set_user_age(const int32_t val) {
  this->user_age = val;
__isset.user_age = true;
}

void NXPurchaseItems::__set_merchant_order_id(const NXMerchantOrderId& val) {
  this->merchant_order_id = val;
}

void NXPurchaseItems::__set_payment_type(const NXCashType::type val) {
  this->payment_type = val;
}

void NXPurchaseItems::__set_payment_rule_id(const NXPaymentRuleId::type val) {
  this->payment_rule_id = val;
}

void NXPurchaseItems::__set_total_amount(const int32_t val) {
  this->total_amount = val;
}

void NXPurchaseItems::__set_items(const std::vector<NXItem> & val) {
  this->items = val;
}

uint32_t NXPurchaseItems::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_ip);
          this->__isset.user_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->reason = (NXPurchaseReason::type)ecast19;
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gameId);
          this->__isset.gameId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nexon_id);
          this->__isset.nexon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nexon_oid);
          this->__isset.nexon_oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          this->__isset.user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_age);
          this->__isset.user_age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->merchant_order_id);
          this->__isset.merchant_order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->payment_type = (NXCashType::type)ecast20;
          this->__isset.payment_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->payment_rule_id = (NXPaymentRuleId::type)ecast21;
          this->__isset.payment_rule_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_amount);
          this->__isset.total_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->items.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->items[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXPurchaseItems::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXPurchaseItems");

  xfer += oprot->writeFieldBegin("user_ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->user_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->gameId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nexon_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nexon_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.nexon_oid) {
    xfer += oprot->writeFieldBegin("nexon_oid", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->nexon_oid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.user_name) {
    xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->user_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.user_age) {
    xfer += oprot->writeFieldBegin("user_age", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->user_age);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("merchant_order_id", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->merchant_order_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payment_type", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->payment_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payment_rule_id", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->payment_rule_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_amount", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->total_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
    std::vector<NXItem> ::const_iterator _iter27;
    for (_iter27 = this->items.begin(); _iter27 != this->items.end(); ++_iter27)
    {
      xfer += (*_iter27).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXPurchaseItems &a, NXPurchaseItems &b) {
  using ::std::swap;
  swap(a.user_ip, b.user_ip);
  swap(a.reason, b.reason);
  swap(a.gameId, b.gameId);
  swap(a.nexon_id, b.nexon_id);
  swap(a.nexon_oid, b.nexon_oid);
  swap(a.user_name, b.user_name);
  swap(a.user_age, b.user_age);
  swap(a.merchant_order_id, b.merchant_order_id);
  swap(a.payment_type, b.payment_type);
  swap(a.payment_rule_id, b.payment_rule_id);
  swap(a.total_amount, b.total_amount);
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

NXPurchaseItems::NXPurchaseItems(const NXPurchaseItems& other28) {
  user_ip = other28.user_ip;
  reason = other28.reason;
  gameId = other28.gameId;
  nexon_id = other28.nexon_id;
  nexon_oid = other28.nexon_oid;
  user_name = other28.user_name;
  user_age = other28.user_age;
  merchant_order_id = other28.merchant_order_id;
  payment_type = other28.payment_type;
  payment_rule_id = other28.payment_rule_id;
  total_amount = other28.total_amount;
  items = other28.items;
  __isset = other28.__isset;
}
NXPurchaseItems& NXPurchaseItems::operator=(const NXPurchaseItems& other29) {
  user_ip = other29.user_ip;
  reason = other29.reason;
  gameId = other29.gameId;
  nexon_id = other29.nexon_id;
  nexon_oid = other29.nexon_oid;
  user_name = other29.user_name;
  user_age = other29.user_age;
  merchant_order_id = other29.merchant_order_id;
  payment_type = other29.payment_type;
  payment_rule_id = other29.payment_rule_id;
  total_amount = other29.total_amount;
  items = other29.items;
  __isset = other29.__isset;
  return *this;
}
void NXPurchaseItems::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXPurchaseItems(";
  out << "user_ip=" << to_string(user_ip);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "gameId=" << to_string(gameId);
  out << ", " << "nexon_id=" << to_string(nexon_id);
  out << ", " << "nexon_oid="; (__isset.nexon_oid ? (out << to_string(nexon_oid)) : (out << "<null>"));
  out << ", " << "user_name="; (__isset.user_name ? (out << to_string(user_name)) : (out << "<null>"));
  out << ", " << "user_age="; (__isset.user_age ? (out << to_string(user_age)) : (out << "<null>"));
  out << ", " << "merchant_order_id=" << to_string(merchant_order_id);
  out << ", " << "payment_type=" << to_string(payment_type);
  out << ", " << "payment_rule_id=" << to_string(payment_rule_id);
  out << ", " << "total_amount=" << to_string(total_amount);
  out << ", " << "items=" << to_string(items);
  out << ")";
}


NXPurchaseItemsResult::~NXPurchaseItemsResult() throw() {
}


void NXPurchaseItemsResult::__set_merchant_order_id(const NXMerchantOrderId& val) {
  this->merchant_order_id = val;
}

void NXPurchaseItemsResult::__set_transaction_id(const NXAPITransactionId val) {
  this->transaction_id = val;
}

void NXPurchaseItemsResult::__set_payment_rule_id(const NXPaymentRuleId::type val) {
  this->payment_rule_id = val;
}

void NXPurchaseItemsResult::__set_total_amount(const int32_t val) {
  this->total_amount = val;
}

void NXPurchaseItemsResult::__set_items(const std::vector<NXItem> & val) {
  this->items = val;
}

void NXPurchaseItemsResult::__set_extend_value(const std::string& val) {
  this->extend_value = val;
}

uint32_t NXPurchaseItemsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->merchant_order_id);
          this->__isset.merchant_order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transaction_id);
          this->__isset.transaction_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast30;
          xfer += iprot->readI32(ecast30);
          this->payment_rule_id = (NXPaymentRuleId::type)ecast30;
          this->__isset.payment_rule_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_amount);
          this->__isset.total_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->items.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += this->items[_i35].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend_value);
          this->__isset.extend_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXPurchaseItemsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXPurchaseItemsResult");

  xfer += oprot->writeFieldBegin("merchant_order_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->merchant_order_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transaction_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->transaction_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payment_rule_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->payment_rule_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_amount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->total_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
    std::vector<NXItem> ::const_iterator _iter36;
    for (_iter36 = this->items.begin(); _iter36 != this->items.end(); ++_iter36)
    {
      xfer += (*_iter36).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extend_value", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->extend_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXPurchaseItemsResult &a, NXPurchaseItemsResult &b) {
  using ::std::swap;
  swap(a.merchant_order_id, b.merchant_order_id);
  swap(a.transaction_id, b.transaction_id);
  swap(a.payment_rule_id, b.payment_rule_id);
  swap(a.total_amount, b.total_amount);
  swap(a.items, b.items);
  swap(a.extend_value, b.extend_value);
  swap(a.__isset, b.__isset);
}

NXPurchaseItemsResult::NXPurchaseItemsResult(const NXPurchaseItemsResult& other37) {
  merchant_order_id = other37.merchant_order_id;
  transaction_id = other37.transaction_id;
  payment_rule_id = other37.payment_rule_id;
  total_amount = other37.total_amount;
  items = other37.items;
  extend_value = other37.extend_value;
  __isset = other37.__isset;
}
NXPurchaseItemsResult& NXPurchaseItemsResult::operator=(const NXPurchaseItemsResult& other38) {
  merchant_order_id = other38.merchant_order_id;
  transaction_id = other38.transaction_id;
  payment_rule_id = other38.payment_rule_id;
  total_amount = other38.total_amount;
  items = other38.items;
  extend_value = other38.extend_value;
  __isset = other38.__isset;
  return *this;
}
void NXPurchaseItemsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXPurchaseItemsResult(";
  out << "merchant_order_id=" << to_string(merchant_order_id);
  out << ", " << "transaction_id=" << to_string(transaction_id);
  out << ", " << "payment_rule_id=" << to_string(payment_rule_id);
  out << ", " << "total_amount=" << to_string(total_amount);
  out << ", " << "items=" << to_string(items);
  out << ", " << "extend_value=" << to_string(extend_value);
  out << ")";
}


NXInventoryPickupResult::~NXInventoryPickupResult() throw() {
}


void NXInventoryPickupResult::__set_result(const int32_t val) {
  this->result = val;
}

void NXInventoryPickupResult::__set_order_no(const NXAPITransactionId val) {
  this->order_no = val;
}

void NXInventoryPickupResult::__set_product_no(const NXProductNo val) {
  this->product_no = val;
}

void NXInventoryPickupResult::__set_order_quantity(const int32_t val) {
  this->order_quantity = val;
}

void NXInventoryPickupResult::__set_extend_value(const std::string& val) {
  this->extend_value = val;
}

uint32_t NXInventoryPickupResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order_no);
          this->__isset.order_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->product_no);
          this->__isset.product_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order_quantity);
          this->__isset.order_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend_value);
          this->__isset.extend_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXInventoryPickupResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXInventoryPickupResult");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_no", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->order_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("product_no", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->product_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_quantity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->order_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extend_value", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->extend_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXInventoryPickupResult &a, NXInventoryPickupResult &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.order_no, b.order_no);
  swap(a.product_no, b.product_no);
  swap(a.order_quantity, b.order_quantity);
  swap(a.extend_value, b.extend_value);
  swap(a.__isset, b.__isset);
}

NXInventoryPickupResult::NXInventoryPickupResult(const NXInventoryPickupResult& other39) {
  result = other39.result;
  order_no = other39.order_no;
  product_no = other39.product_no;
  order_quantity = other39.order_quantity;
  extend_value = other39.extend_value;
  __isset = other39.__isset;
}
NXInventoryPickupResult& NXInventoryPickupResult::operator=(const NXInventoryPickupResult& other40) {
  result = other40.result;
  order_no = other40.order_no;
  product_no = other40.product_no;
  order_quantity = other40.order_quantity;
  extend_value = other40.extend_value;
  __isset = other40.__isset;
  return *this;
}
void NXInventoryPickupResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXInventoryPickupResult(";
  out << "result=" << to_string(result);
  out << ", " << "order_no=" << to_string(order_no);
  out << ", " << "product_no=" << to_string(product_no);
  out << ", " << "order_quantity=" << to_string(order_quantity);
  out << ", " << "extend_value=" << to_string(extend_value);
  out << ")";
}


NXInventoryCheckResult::~NXInventoryCheckResult() throw() {
}


void NXInventoryCheckResult::__set_result(const int32_t val) {
  this->result = val;
}

void NXInventoryCheckResult::__set_order_type(const ENXInventoryOrderType::type val) {
  this->order_type = val;
}

void NXInventoryCheckResult::__set_total_count(const int32_t val) {
  this->total_count = val;
}

uint32_t NXInventoryCheckResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast41;
          xfer += iprot->readI32(ecast41);
          this->order_type = (ENXInventoryOrderType::type)ecast41;
          this->__isset.order_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_count);
          this->__isset.total_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NXInventoryCheckResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NXInventoryCheckResult");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->order_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->total_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NXInventoryCheckResult &a, NXInventoryCheckResult &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.order_type, b.order_type);
  swap(a.total_count, b.total_count);
  swap(a.__isset, b.__isset);
}

NXInventoryCheckResult::NXInventoryCheckResult(const NXInventoryCheckResult& other42) {
  result = other42.result;
  order_type = other42.order_type;
  total_count = other42.total_count;
  __isset = other42.__isset;
}
NXInventoryCheckResult& NXInventoryCheckResult::operator=(const NXInventoryCheckResult& other43) {
  result = other43.result;
  order_type = other43.order_type;
  total_count = other43.total_count;
  __isset = other43.__isset;
  return *this;
}
void NXInventoryCheckResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NXInventoryCheckResult(";
  out << "result=" << to_string(result);
  out << ", " << "order_type=" << to_string(order_type);
  out << ", " << "total_count=" << to_string(total_count);
  out << ")";
}

} // namespace
