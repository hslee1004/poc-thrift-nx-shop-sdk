/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef nxapi_shop_H
#define nxapi_shop_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "nxapi_shop_types.h"

namespace nxapi_shop {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class nxapi_shopIf {
 public:
  virtual ~nxapi_shopIf() {}
  virtual void ping(std::string& _return) = 0;
  virtual void Initialize(std::string& _return, const std::string& service_code, const int32_t server_no) = 0;
  virtual int32_t HeartBeat(const int32_t product_release_ticks) = 0;
  virtual void CheckBalance(NXAccountBalanceResult& _return, const NXUserId nexon_id) = 0;
  virtual void CheckBalanceEx(NXAccountBalanceResult& _return, const NXUserId nexon_id, const NXCashType::type cash_type) = 0;
  virtual void PurchaseItems(NXPurchaseItemsResult& _return, const NXPurchaseItems& items) = 0;
  virtual void InventoryCheck(NXInventoryCheckResult& _return, const NXGameId& game_id, const ENXShowInventory::type show_inventory, const ENXInventoryOrderType::type is_present) = 0;
  virtual void InventoryPickup(NXInventoryPickupResult& _return, const NXAPITransactionId order_id, const NXProductNo product_no, const int32_t order_quntity, const std::string& extend_value) = 0;
};

class nxapi_shopIfFactory {
 public:
  typedef nxapi_shopIf Handler;

  virtual ~nxapi_shopIfFactory() {}

  virtual nxapi_shopIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(nxapi_shopIf* /* handler */) = 0;
};

class nxapi_shopIfSingletonFactory : virtual public nxapi_shopIfFactory {
 public:
  nxapi_shopIfSingletonFactory(const boost::shared_ptr<nxapi_shopIf>& iface) : iface_(iface) {}
  virtual ~nxapi_shopIfSingletonFactory() {}

  virtual nxapi_shopIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(nxapi_shopIf* /* handler */) {}

 protected:
  boost::shared_ptr<nxapi_shopIf> iface_;
};

class nxapi_shopNull : virtual public nxapi_shopIf {
 public:
  virtual ~nxapi_shopNull() {}
  void ping(std::string& /* _return */) {
    return;
  }
  void Initialize(std::string& /* _return */, const std::string& /* service_code */, const int32_t /* server_no */) {
    return;
  }
  int32_t HeartBeat(const int32_t /* product_release_ticks */) {
    int32_t _return = 0;
    return _return;
  }
  void CheckBalance(NXAccountBalanceResult& /* _return */, const NXUserId /* nexon_id */) {
    return;
  }
  void CheckBalanceEx(NXAccountBalanceResult& /* _return */, const NXUserId /* nexon_id */, const NXCashType::type /* cash_type */) {
    return;
  }
  void PurchaseItems(NXPurchaseItemsResult& /* _return */, const NXPurchaseItems& /* items */) {
    return;
  }
  void InventoryCheck(NXInventoryCheckResult& /* _return */, const NXGameId& /* game_id */, const ENXShowInventory::type /* show_inventory */, const ENXInventoryOrderType::type /* is_present */) {
    return;
  }
  void InventoryPickup(NXInventoryPickupResult& /* _return */, const NXAPITransactionId /* order_id */, const NXProductNo /* product_no */, const int32_t /* order_quntity */, const std::string& /* extend_value */) {
    return;
  }
};


class nxapi_shop_ping_args {
 public:

  nxapi_shop_ping_args(const nxapi_shop_ping_args&);
  nxapi_shop_ping_args& operator=(const nxapi_shop_ping_args&);
  nxapi_shop_ping_args() {
  }

  virtual ~nxapi_shop_ping_args() throw();

  bool operator == (const nxapi_shop_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const nxapi_shop_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_ping_pargs {
 public:


  virtual ~nxapi_shop_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_ping_result__isset {
  _nxapi_shop_ping_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_ping_result__isset;

class nxapi_shop_ping_result {
 public:

  nxapi_shop_ping_result(const nxapi_shop_ping_result&);
  nxapi_shop_ping_result& operator=(const nxapi_shop_ping_result&);
  nxapi_shop_ping_result() : success() {
  }

  virtual ~nxapi_shop_ping_result() throw();
  std::string success;

  _nxapi_shop_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const nxapi_shop_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_ping_presult__isset {
  _nxapi_shop_ping_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_ping_presult__isset;

class nxapi_shop_ping_presult {
 public:


  virtual ~nxapi_shop_ping_presult() throw();
  std::string* success;

  _nxapi_shop_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nxapi_shop_Initialize_args__isset {
  _nxapi_shop_Initialize_args__isset() : service_code(false), server_no(false) {}
  bool service_code :1;
  bool server_no :1;
} _nxapi_shop_Initialize_args__isset;

class nxapi_shop_Initialize_args {
 public:

  nxapi_shop_Initialize_args(const nxapi_shop_Initialize_args&);
  nxapi_shop_Initialize_args& operator=(const nxapi_shop_Initialize_args&);
  nxapi_shop_Initialize_args() : service_code(), server_no(0) {
  }

  virtual ~nxapi_shop_Initialize_args() throw();
  std::string service_code;
  int32_t server_no;

  _nxapi_shop_Initialize_args__isset __isset;

  void __set_service_code(const std::string& val);

  void __set_server_no(const int32_t val);

  bool operator == (const nxapi_shop_Initialize_args & rhs) const
  {
    if (!(service_code == rhs.service_code))
      return false;
    if (!(server_no == rhs.server_no))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_Initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_Initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_Initialize_pargs {
 public:


  virtual ~nxapi_shop_Initialize_pargs() throw();
  const std::string* service_code;
  const int32_t* server_no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_Initialize_result__isset {
  _nxapi_shop_Initialize_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_Initialize_result__isset;

class nxapi_shop_Initialize_result {
 public:

  nxapi_shop_Initialize_result(const nxapi_shop_Initialize_result&);
  nxapi_shop_Initialize_result& operator=(const nxapi_shop_Initialize_result&);
  nxapi_shop_Initialize_result() : success() {
  }

  virtual ~nxapi_shop_Initialize_result() throw();
  std::string success;

  _nxapi_shop_Initialize_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const nxapi_shop_Initialize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_Initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_Initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_Initialize_presult__isset {
  _nxapi_shop_Initialize_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_Initialize_presult__isset;

class nxapi_shop_Initialize_presult {
 public:


  virtual ~nxapi_shop_Initialize_presult() throw();
  std::string* success;

  _nxapi_shop_Initialize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nxapi_shop_HeartBeat_args__isset {
  _nxapi_shop_HeartBeat_args__isset() : product_release_ticks(false) {}
  bool product_release_ticks :1;
} _nxapi_shop_HeartBeat_args__isset;

class nxapi_shop_HeartBeat_args {
 public:

  nxapi_shop_HeartBeat_args(const nxapi_shop_HeartBeat_args&);
  nxapi_shop_HeartBeat_args& operator=(const nxapi_shop_HeartBeat_args&);
  nxapi_shop_HeartBeat_args() : product_release_ticks(0) {
  }

  virtual ~nxapi_shop_HeartBeat_args() throw();
  int32_t product_release_ticks;

  _nxapi_shop_HeartBeat_args__isset __isset;

  void __set_product_release_ticks(const int32_t val);

  bool operator == (const nxapi_shop_HeartBeat_args & rhs) const
  {
    if (!(product_release_ticks == rhs.product_release_ticks))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_HeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_HeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_HeartBeat_pargs {
 public:


  virtual ~nxapi_shop_HeartBeat_pargs() throw();
  const int32_t* product_release_ticks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_HeartBeat_result__isset {
  _nxapi_shop_HeartBeat_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_HeartBeat_result__isset;

class nxapi_shop_HeartBeat_result {
 public:

  nxapi_shop_HeartBeat_result(const nxapi_shop_HeartBeat_result&);
  nxapi_shop_HeartBeat_result& operator=(const nxapi_shop_HeartBeat_result&);
  nxapi_shop_HeartBeat_result() : success(0) {
  }

  virtual ~nxapi_shop_HeartBeat_result() throw();
  int32_t success;

  _nxapi_shop_HeartBeat_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const nxapi_shop_HeartBeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_HeartBeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_HeartBeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_HeartBeat_presult__isset {
  _nxapi_shop_HeartBeat_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_HeartBeat_presult__isset;

class nxapi_shop_HeartBeat_presult {
 public:


  virtual ~nxapi_shop_HeartBeat_presult() throw();
  int32_t* success;

  _nxapi_shop_HeartBeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nxapi_shop_CheckBalance_args__isset {
  _nxapi_shop_CheckBalance_args__isset() : nexon_id(false) {}
  bool nexon_id :1;
} _nxapi_shop_CheckBalance_args__isset;

class nxapi_shop_CheckBalance_args {
 public:

  nxapi_shop_CheckBalance_args(const nxapi_shop_CheckBalance_args&);
  nxapi_shop_CheckBalance_args& operator=(const nxapi_shop_CheckBalance_args&);
  nxapi_shop_CheckBalance_args() : nexon_id(0) {
  }

  virtual ~nxapi_shop_CheckBalance_args() throw();
  NXUserId nexon_id;

  _nxapi_shop_CheckBalance_args__isset __isset;

  void __set_nexon_id(const NXUserId val);

  bool operator == (const nxapi_shop_CheckBalance_args & rhs) const
  {
    if (!(nexon_id == rhs.nexon_id))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_CheckBalance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_CheckBalance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_CheckBalance_pargs {
 public:


  virtual ~nxapi_shop_CheckBalance_pargs() throw();
  const NXUserId* nexon_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_CheckBalance_result__isset {
  _nxapi_shop_CheckBalance_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_CheckBalance_result__isset;

class nxapi_shop_CheckBalance_result {
 public:

  nxapi_shop_CheckBalance_result(const nxapi_shop_CheckBalance_result&);
  nxapi_shop_CheckBalance_result& operator=(const nxapi_shop_CheckBalance_result&);
  nxapi_shop_CheckBalance_result() {
  }

  virtual ~nxapi_shop_CheckBalance_result() throw();
  NXAccountBalanceResult success;

  _nxapi_shop_CheckBalance_result__isset __isset;

  void __set_success(const NXAccountBalanceResult& val);

  bool operator == (const nxapi_shop_CheckBalance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_CheckBalance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_CheckBalance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_CheckBalance_presult__isset {
  _nxapi_shop_CheckBalance_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_CheckBalance_presult__isset;

class nxapi_shop_CheckBalance_presult {
 public:


  virtual ~nxapi_shop_CheckBalance_presult() throw();
  NXAccountBalanceResult* success;

  _nxapi_shop_CheckBalance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nxapi_shop_CheckBalanceEx_args__isset {
  _nxapi_shop_CheckBalanceEx_args__isset() : nexon_id(false), cash_type(false) {}
  bool nexon_id :1;
  bool cash_type :1;
} _nxapi_shop_CheckBalanceEx_args__isset;

class nxapi_shop_CheckBalanceEx_args {
 public:

  nxapi_shop_CheckBalanceEx_args(const nxapi_shop_CheckBalanceEx_args&);
  nxapi_shop_CheckBalanceEx_args& operator=(const nxapi_shop_CheckBalanceEx_args&);
  nxapi_shop_CheckBalanceEx_args() : nexon_id(0), cash_type((NXCashType::type)0) {
  }

  virtual ~nxapi_shop_CheckBalanceEx_args() throw();
  NXUserId nexon_id;
  NXCashType::type cash_type;

  _nxapi_shop_CheckBalanceEx_args__isset __isset;

  void __set_nexon_id(const NXUserId val);

  void __set_cash_type(const NXCashType::type val);

  bool operator == (const nxapi_shop_CheckBalanceEx_args & rhs) const
  {
    if (!(nexon_id == rhs.nexon_id))
      return false;
    if (!(cash_type == rhs.cash_type))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_CheckBalanceEx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_CheckBalanceEx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_CheckBalanceEx_pargs {
 public:


  virtual ~nxapi_shop_CheckBalanceEx_pargs() throw();
  const NXUserId* nexon_id;
  const NXCashType::type* cash_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_CheckBalanceEx_result__isset {
  _nxapi_shop_CheckBalanceEx_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_CheckBalanceEx_result__isset;

class nxapi_shop_CheckBalanceEx_result {
 public:

  nxapi_shop_CheckBalanceEx_result(const nxapi_shop_CheckBalanceEx_result&);
  nxapi_shop_CheckBalanceEx_result& operator=(const nxapi_shop_CheckBalanceEx_result&);
  nxapi_shop_CheckBalanceEx_result() {
  }

  virtual ~nxapi_shop_CheckBalanceEx_result() throw();
  NXAccountBalanceResult success;

  _nxapi_shop_CheckBalanceEx_result__isset __isset;

  void __set_success(const NXAccountBalanceResult& val);

  bool operator == (const nxapi_shop_CheckBalanceEx_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_CheckBalanceEx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_CheckBalanceEx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_CheckBalanceEx_presult__isset {
  _nxapi_shop_CheckBalanceEx_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_CheckBalanceEx_presult__isset;

class nxapi_shop_CheckBalanceEx_presult {
 public:


  virtual ~nxapi_shop_CheckBalanceEx_presult() throw();
  NXAccountBalanceResult* success;

  _nxapi_shop_CheckBalanceEx_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nxapi_shop_PurchaseItems_args__isset {
  _nxapi_shop_PurchaseItems_args__isset() : items(false) {}
  bool items :1;
} _nxapi_shop_PurchaseItems_args__isset;

class nxapi_shop_PurchaseItems_args {
 public:

  nxapi_shop_PurchaseItems_args(const nxapi_shop_PurchaseItems_args&);
  nxapi_shop_PurchaseItems_args& operator=(const nxapi_shop_PurchaseItems_args&);
  nxapi_shop_PurchaseItems_args() {
  }

  virtual ~nxapi_shop_PurchaseItems_args() throw();
  NXPurchaseItems items;

  _nxapi_shop_PurchaseItems_args__isset __isset;

  void __set_items(const NXPurchaseItems& val);

  bool operator == (const nxapi_shop_PurchaseItems_args & rhs) const
  {
    if (!(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_PurchaseItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_PurchaseItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_PurchaseItems_pargs {
 public:


  virtual ~nxapi_shop_PurchaseItems_pargs() throw();
  const NXPurchaseItems* items;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_PurchaseItems_result__isset {
  _nxapi_shop_PurchaseItems_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_PurchaseItems_result__isset;

class nxapi_shop_PurchaseItems_result {
 public:

  nxapi_shop_PurchaseItems_result(const nxapi_shop_PurchaseItems_result&);
  nxapi_shop_PurchaseItems_result& operator=(const nxapi_shop_PurchaseItems_result&);
  nxapi_shop_PurchaseItems_result() {
  }

  virtual ~nxapi_shop_PurchaseItems_result() throw();
  NXPurchaseItemsResult success;

  _nxapi_shop_PurchaseItems_result__isset __isset;

  void __set_success(const NXPurchaseItemsResult& val);

  bool operator == (const nxapi_shop_PurchaseItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_PurchaseItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_PurchaseItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_PurchaseItems_presult__isset {
  _nxapi_shop_PurchaseItems_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_PurchaseItems_presult__isset;

class nxapi_shop_PurchaseItems_presult {
 public:


  virtual ~nxapi_shop_PurchaseItems_presult() throw();
  NXPurchaseItemsResult* success;

  _nxapi_shop_PurchaseItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nxapi_shop_InventoryCheck_args__isset {
  _nxapi_shop_InventoryCheck_args__isset() : game_id(false), show_inventory(false), is_present(false) {}
  bool game_id :1;
  bool show_inventory :1;
  bool is_present :1;
} _nxapi_shop_InventoryCheck_args__isset;

class nxapi_shop_InventoryCheck_args {
 public:

  nxapi_shop_InventoryCheck_args(const nxapi_shop_InventoryCheck_args&);
  nxapi_shop_InventoryCheck_args& operator=(const nxapi_shop_InventoryCheck_args&);
  nxapi_shop_InventoryCheck_args() : game_id(), show_inventory((ENXShowInventory::type)0), is_present((ENXInventoryOrderType::type)0) {
  }

  virtual ~nxapi_shop_InventoryCheck_args() throw();
  NXGameId game_id;
  ENXShowInventory::type show_inventory;
  ENXInventoryOrderType::type is_present;

  _nxapi_shop_InventoryCheck_args__isset __isset;

  void __set_game_id(const NXGameId& val);

  void __set_show_inventory(const ENXShowInventory::type val);

  void __set_is_present(const ENXInventoryOrderType::type val);

  bool operator == (const nxapi_shop_InventoryCheck_args & rhs) const
  {
    if (!(game_id == rhs.game_id))
      return false;
    if (!(show_inventory == rhs.show_inventory))
      return false;
    if (!(is_present == rhs.is_present))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_InventoryCheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_InventoryCheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_InventoryCheck_pargs {
 public:


  virtual ~nxapi_shop_InventoryCheck_pargs() throw();
  const NXGameId* game_id;
  const ENXShowInventory::type* show_inventory;
  const ENXInventoryOrderType::type* is_present;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_InventoryCheck_result__isset {
  _nxapi_shop_InventoryCheck_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_InventoryCheck_result__isset;

class nxapi_shop_InventoryCheck_result {
 public:

  nxapi_shop_InventoryCheck_result(const nxapi_shop_InventoryCheck_result&);
  nxapi_shop_InventoryCheck_result& operator=(const nxapi_shop_InventoryCheck_result&);
  nxapi_shop_InventoryCheck_result() {
  }

  virtual ~nxapi_shop_InventoryCheck_result() throw();
  NXInventoryCheckResult success;

  _nxapi_shop_InventoryCheck_result__isset __isset;

  void __set_success(const NXInventoryCheckResult& val);

  bool operator == (const nxapi_shop_InventoryCheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_InventoryCheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_InventoryCheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_InventoryCheck_presult__isset {
  _nxapi_shop_InventoryCheck_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_InventoryCheck_presult__isset;

class nxapi_shop_InventoryCheck_presult {
 public:


  virtual ~nxapi_shop_InventoryCheck_presult() throw();
  NXInventoryCheckResult* success;

  _nxapi_shop_InventoryCheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nxapi_shop_InventoryPickup_args__isset {
  _nxapi_shop_InventoryPickup_args__isset() : order_id(false), product_no(false), order_quntity(false), extend_value(false) {}
  bool order_id :1;
  bool product_no :1;
  bool order_quntity :1;
  bool extend_value :1;
} _nxapi_shop_InventoryPickup_args__isset;

class nxapi_shop_InventoryPickup_args {
 public:

  nxapi_shop_InventoryPickup_args(const nxapi_shop_InventoryPickup_args&);
  nxapi_shop_InventoryPickup_args& operator=(const nxapi_shop_InventoryPickup_args&);
  nxapi_shop_InventoryPickup_args() : order_id(0), product_no(0), order_quntity(0), extend_value() {
  }

  virtual ~nxapi_shop_InventoryPickup_args() throw();
  NXAPITransactionId order_id;
  NXProductNo product_no;
  int32_t order_quntity;
  std::string extend_value;

  _nxapi_shop_InventoryPickup_args__isset __isset;

  void __set_order_id(const NXAPITransactionId val);

  void __set_product_no(const NXProductNo val);

  void __set_order_quntity(const int32_t val);

  void __set_extend_value(const std::string& val);

  bool operator == (const nxapi_shop_InventoryPickup_args & rhs) const
  {
    if (!(order_id == rhs.order_id))
      return false;
    if (!(product_no == rhs.product_no))
      return false;
    if (!(order_quntity == rhs.order_quntity))
      return false;
    if (!(extend_value == rhs.extend_value))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_InventoryPickup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_InventoryPickup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nxapi_shop_InventoryPickup_pargs {
 public:


  virtual ~nxapi_shop_InventoryPickup_pargs() throw();
  const NXAPITransactionId* order_id;
  const NXProductNo* product_no;
  const int32_t* order_quntity;
  const std::string* extend_value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_InventoryPickup_result__isset {
  _nxapi_shop_InventoryPickup_result__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_InventoryPickup_result__isset;

class nxapi_shop_InventoryPickup_result {
 public:

  nxapi_shop_InventoryPickup_result(const nxapi_shop_InventoryPickup_result&);
  nxapi_shop_InventoryPickup_result& operator=(const nxapi_shop_InventoryPickup_result&);
  nxapi_shop_InventoryPickup_result() {
  }

  virtual ~nxapi_shop_InventoryPickup_result() throw();
  NXInventoryPickupResult success;

  _nxapi_shop_InventoryPickup_result__isset __isset;

  void __set_success(const NXInventoryPickupResult& val);

  bool operator == (const nxapi_shop_InventoryPickup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nxapi_shop_InventoryPickup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nxapi_shop_InventoryPickup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nxapi_shop_InventoryPickup_presult__isset {
  _nxapi_shop_InventoryPickup_presult__isset() : success(false) {}
  bool success :1;
} _nxapi_shop_InventoryPickup_presult__isset;

class nxapi_shop_InventoryPickup_presult {
 public:


  virtual ~nxapi_shop_InventoryPickup_presult() throw();
  NXInventoryPickupResult* success;

  _nxapi_shop_InventoryPickup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class nxapi_shopClient : virtual public nxapi_shopIf {
 public:
  nxapi_shopClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  nxapi_shopClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
  void Initialize(std::string& _return, const std::string& service_code, const int32_t server_no);
  void send_Initialize(const std::string& service_code, const int32_t server_no);
  void recv_Initialize(std::string& _return);
  int32_t HeartBeat(const int32_t product_release_ticks);
  void send_HeartBeat(const int32_t product_release_ticks);
  int32_t recv_HeartBeat();
  void CheckBalance(NXAccountBalanceResult& _return, const NXUserId nexon_id);
  void send_CheckBalance(const NXUserId nexon_id);
  void recv_CheckBalance(NXAccountBalanceResult& _return);
  void CheckBalanceEx(NXAccountBalanceResult& _return, const NXUserId nexon_id, const NXCashType::type cash_type);
  void send_CheckBalanceEx(const NXUserId nexon_id, const NXCashType::type cash_type);
  void recv_CheckBalanceEx(NXAccountBalanceResult& _return);
  void PurchaseItems(NXPurchaseItemsResult& _return, const NXPurchaseItems& items);
  void send_PurchaseItems(const NXPurchaseItems& items);
  void recv_PurchaseItems(NXPurchaseItemsResult& _return);
  void InventoryCheck(NXInventoryCheckResult& _return, const NXGameId& game_id, const ENXShowInventory::type show_inventory, const ENXInventoryOrderType::type is_present);
  void send_InventoryCheck(const NXGameId& game_id, const ENXShowInventory::type show_inventory, const ENXInventoryOrderType::type is_present);
  void recv_InventoryCheck(NXInventoryCheckResult& _return);
  void InventoryPickup(NXInventoryPickupResult& _return, const NXAPITransactionId order_id, const NXProductNo product_no, const int32_t order_quntity, const std::string& extend_value);
  void send_InventoryPickup(const NXAPITransactionId order_id, const NXProductNo product_no, const int32_t order_quntity, const std::string& extend_value);
  void recv_InventoryPickup(NXInventoryPickupResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class nxapi_shopProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<nxapi_shopIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (nxapi_shopProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckBalance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckBalanceEx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PurchaseItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InventoryCheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InventoryPickup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  nxapi_shopProcessor(boost::shared_ptr<nxapi_shopIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &nxapi_shopProcessor::process_ping;
    processMap_["Initialize"] = &nxapi_shopProcessor::process_Initialize;
    processMap_["HeartBeat"] = &nxapi_shopProcessor::process_HeartBeat;
    processMap_["CheckBalance"] = &nxapi_shopProcessor::process_CheckBalance;
    processMap_["CheckBalanceEx"] = &nxapi_shopProcessor::process_CheckBalanceEx;
    processMap_["PurchaseItems"] = &nxapi_shopProcessor::process_PurchaseItems;
    processMap_["InventoryCheck"] = &nxapi_shopProcessor::process_InventoryCheck;
    processMap_["InventoryPickup"] = &nxapi_shopProcessor::process_InventoryPickup;
  }

  virtual ~nxapi_shopProcessor() {}
};

class nxapi_shopProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  nxapi_shopProcessorFactory(const ::boost::shared_ptr< nxapi_shopIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< nxapi_shopIfFactory > handlerFactory_;
};

class nxapi_shopMultiface : virtual public nxapi_shopIf {
 public:
  nxapi_shopMultiface(std::vector<boost::shared_ptr<nxapi_shopIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~nxapi_shopMultiface() {}
 protected:
  std::vector<boost::shared_ptr<nxapi_shopIf> > ifaces_;
  nxapi_shopMultiface() {}
  void add(boost::shared_ptr<nxapi_shopIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void Initialize(std::string& _return, const std::string& service_code, const int32_t server_no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Initialize(_return, service_code, server_no);
    }
    ifaces_[i]->Initialize(_return, service_code, server_no);
    return;
  }

  int32_t HeartBeat(const int32_t product_release_ticks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HeartBeat(product_release_ticks);
    }
    return ifaces_[i]->HeartBeat(product_release_ticks);
  }

  void CheckBalance(NXAccountBalanceResult& _return, const NXUserId nexon_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckBalance(_return, nexon_id);
    }
    ifaces_[i]->CheckBalance(_return, nexon_id);
    return;
  }

  void CheckBalanceEx(NXAccountBalanceResult& _return, const NXUserId nexon_id, const NXCashType::type cash_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckBalanceEx(_return, nexon_id, cash_type);
    }
    ifaces_[i]->CheckBalanceEx(_return, nexon_id, cash_type);
    return;
  }

  void PurchaseItems(NXPurchaseItemsResult& _return, const NXPurchaseItems& items) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PurchaseItems(_return, items);
    }
    ifaces_[i]->PurchaseItems(_return, items);
    return;
  }

  void InventoryCheck(NXInventoryCheckResult& _return, const NXGameId& game_id, const ENXShowInventory::type show_inventory, const ENXInventoryOrderType::type is_present) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InventoryCheck(_return, game_id, show_inventory, is_present);
    }
    ifaces_[i]->InventoryCheck(_return, game_id, show_inventory, is_present);
    return;
  }

  void InventoryPickup(NXInventoryPickupResult& _return, const NXAPITransactionId order_id, const NXProductNo product_no, const int32_t order_quntity, const std::string& extend_value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InventoryPickup(_return, order_id, product_no, order_quntity, extend_value);
    }
    ifaces_[i]->InventoryPickup(_return, order_id, product_no, order_quntity, extend_value);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class nxapi_shopConcurrentClient : virtual public nxapi_shopIf {
 public:
  nxapi_shopConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  nxapi_shopConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return);
  int32_t send_ping();
  void recv_ping(std::string& _return, const int32_t seqid);
  void Initialize(std::string& _return, const std::string& service_code, const int32_t server_no);
  int32_t send_Initialize(const std::string& service_code, const int32_t server_no);
  void recv_Initialize(std::string& _return, const int32_t seqid);
  int32_t HeartBeat(const int32_t product_release_ticks);
  int32_t send_HeartBeat(const int32_t product_release_ticks);
  int32_t recv_HeartBeat(const int32_t seqid);
  void CheckBalance(NXAccountBalanceResult& _return, const NXUserId nexon_id);
  int32_t send_CheckBalance(const NXUserId nexon_id);
  void recv_CheckBalance(NXAccountBalanceResult& _return, const int32_t seqid);
  void CheckBalanceEx(NXAccountBalanceResult& _return, const NXUserId nexon_id, const NXCashType::type cash_type);
  int32_t send_CheckBalanceEx(const NXUserId nexon_id, const NXCashType::type cash_type);
  void recv_CheckBalanceEx(NXAccountBalanceResult& _return, const int32_t seqid);
  void PurchaseItems(NXPurchaseItemsResult& _return, const NXPurchaseItems& items);
  int32_t send_PurchaseItems(const NXPurchaseItems& items);
  void recv_PurchaseItems(NXPurchaseItemsResult& _return, const int32_t seqid);
  void InventoryCheck(NXInventoryCheckResult& _return, const NXGameId& game_id, const ENXShowInventory::type show_inventory, const ENXInventoryOrderType::type is_present);
  int32_t send_InventoryCheck(const NXGameId& game_id, const ENXShowInventory::type show_inventory, const ENXInventoryOrderType::type is_present);
  void recv_InventoryCheck(NXInventoryCheckResult& _return, const int32_t seqid);
  void InventoryPickup(NXInventoryPickupResult& _return, const NXAPITransactionId order_id, const NXProductNo product_no, const int32_t order_quntity, const std::string& extend_value);
  int32_t send_InventoryPickup(const NXAPITransactionId order_id, const NXProductNo product_no, const int32_t order_quntity, const std::string& extend_value);
  void recv_InventoryPickup(NXInventoryPickupResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
